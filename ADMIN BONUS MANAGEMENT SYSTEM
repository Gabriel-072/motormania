-- ==========================================
-- ADMIN BONUS MANAGEMENT SYSTEM
-- ==========================================

-- ==========================================
-- 1. ADMIN CONTROLS TABLE
-- ==========================================

CREATE TABLE IF NOT EXISTS admin_bonus_controls (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Control Type
  control_type VARCHAR(50) NOT NULL, -- 'promo_codes', 'direct_bonuses', 'global_settings'
  control_name VARCHAR(100) NOT NULL,
  
  -- Settings
  is_enabled BOOLEAN DEFAULT true,
  config_data JSONB NOT NULL DEFAULT '{}',
  
  -- Metadata
  description TEXT,
  created_by TEXT, -- Admin who created/modified
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- Constraints
  UNIQUE(control_type, control_name)
);

-- Index for quick lookups
CREATE INDEX idx_admin_bonus_controls_type ON admin_bonus_controls(control_type, is_enabled);

-- ==========================================
-- 2. PROMO CODE CONTROLS RPC FUNCTIONS
-- ==========================================

-- Function to enable/disable promo code system
CREATE OR REPLACE FUNCTION toggle_promo_codes_system(
  p_enabled BOOLEAN,
  p_admin_user TEXT DEFAULT 'system'
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'promo_codes', 
    'system_enabled', 
    p_enabled, 
    '{"last_toggled": "' || NOW() || '"}',
    CASE WHEN p_enabled THEN 'Promo codes system enabled' ELSE 'Promo codes system disabled' END,
    p_admin_user
  )
  ON CONFLICT (control_type, control_name)
  DO UPDATE SET 
    is_enabled = p_enabled,
    config_data = jsonb_set(config_data, '{last_toggled}', to_jsonb(NOW()::text)),
    updated_at = NOW(),
    created_by = p_admin_user;
    
  RETURN p_enabled;
END;
$$;

-- Function to set promo code global limits
CREATE OR REPLACE FUNCTION set_promo_code_limits(
  p_max_amount_cop DECIMAL DEFAULT 100000,
  p_max_uses_per_user INTEGER DEFAULT 5,
  p_admin_user TEXT DEFAULT 'system'
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'promo_codes',
    'global_limits',
    true,
    jsonb_build_object(
      'max_amount_cop', p_max_amount_cop,
      'max_uses_per_user', p_max_uses_per_user,
      'updated_at', NOW()
    ),
    'Global promo code limits',
    p_admin_user
  )
  ON CONFLICT (control_type, control_name)
  DO UPDATE SET 
    config_data = jsonb_build_object(
      'max_amount_cop', p_max_amount_cop,
      'max_uses_per_user', p_max_uses_per_user,
      'updated_at', NOW()
    ),
    updated_at = NOW(),
    created_by = p_admin_user;
    
  RETURN true;
END;
$$;

-- ==========================================
-- 3. DIRECT BONUS CONTROLS RPC FUNCTIONS
-- ==========================================

-- Function to enable/disable direct bonus system
CREATE OR REPLACE FUNCTION toggle_direct_bonuses_system(
  p_enabled BOOLEAN,
  p_admin_user TEXT DEFAULT 'system'
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update all promotional campaigns
  UPDATE promotional_campaigns 
  SET is_active = p_enabled
  WHERE campaign_type = 'picks_bonus';
  
  -- Log the control change
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'direct_bonuses', 
    'system_enabled', 
    p_enabled, 
    jsonb_build_object(
      'campaigns_affected', (SELECT COUNT(*) FROM promotional_campaigns WHERE campaign_type = 'picks_bonus'),
      'last_toggled', NOW()
    ),
    CASE WHEN p_enabled THEN 'Direct bonuses system enabled' ELSE 'Direct bonuses system disabled' END,
    p_admin_user
  )
  ON CONFLICT (control_type, control_name)
  DO UPDATE SET 
    is_enabled = p_enabled,
    config_data = jsonb_build_object(
      'campaigns_affected', (SELECT COUNT(*) FROM promotional_campaigns WHERE campaign_type = 'picks_bonus'),
      'last_toggled', NOW()
    ),
    updated_at = NOW(),
    created_by = p_admin_user;
    
  RETURN p_enabled;
END;
$$;

-- Function to quickly set direct bonus percentage
CREATE OR REPLACE FUNCTION set_direct_bonus_percentage(
  p_percentage INTEGER DEFAULT 100,
  p_campaign_name TEXT DEFAULT 'Bono Directo 100%',
  p_admin_user TEXT DEFAULT 'system'
)
RETURNS BOOLEAN
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update the main campaign
  UPDATE promotional_campaigns 
  SET 
    bonus_percentage = p_percentage,
    name = CASE 
      WHEN p_percentage = 100 THEN 'Bono Directo 100%'
      WHEN p_percentage = 50 THEN 'Bono Directo 50%'
      WHEN p_percentage = 200 THEN 'Bono Directo 200%'
      ELSE 'Bono Directo ' || p_percentage || '%'
    END,
    description = 'Multiplica tu apuesta por ' || (100 + p_percentage) || '%. Apuesta $20,000 y juega con $' || (20000 * (100 + p_percentage) / 100) || '.'
  WHERE name = p_campaign_name OR name LIKE 'Bono Directo%'
  LIMIT 1;
  
  -- Log the change
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'direct_bonuses',
    'percentage_setting',
    true,
    jsonb_build_object(
      'percentage', p_percentage,
      'campaign_name', p_campaign_name,
      'updated_at', NOW()
    ),
    'Direct bonus percentage set to ' || p_percentage || '%',
    p_admin_user
  )
  ON CONFLICT (control_type, control_name)
  DO UPDATE SET 
    config_data = jsonb_build_object(
      'percentage', p_percentage,
      'campaign_name', p_campaign_name,
      'updated_at', NOW()
    ),
    updated_at = NOW(),
    created_by = p_admin_user;
    
  RETURN true;
END;
$$;

-- ==========================================
-- 4. GLOBAL SYSTEM CONTROLS
-- ==========================================

-- Function to enable/disable all bonus systems
CREATE OR REPLACE FUNCTION toggle_all_bonus_systems(
  p_enabled BOOLEAN,
  p_admin_user TEXT DEFAULT 'system'
)
RETURNS TABLE (
  system_name TEXT,
  enabled BOOLEAN,
  message TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
  -- Toggle promo codes
  PERFORM toggle_promo_codes_system(p_enabled, p_admin_user);
  
  -- Toggle direct bonuses
  PERFORM toggle_direct_bonuses_system(p_enabled, p_admin_user);
  
  -- Log global change
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'global_settings',
    'all_systems_toggle',
    p_enabled,
    jsonb_build_object(
      'promo_codes', p_enabled,
      'direct_bonuses', p_enabled,
      'toggled_at', NOW()
    ),
    CASE WHEN p_enabled THEN 'All bonus systems enabled' ELSE 'All bonus systems disabled' END,
    p_admin_user
  )
  ON CONFLICT (control_type, control_name)
  DO UPDATE SET 
    is_enabled = p_enabled,
    config_data = jsonb_build_object(
      'promo_codes', p_enabled,
      'direct_bonuses', p_enabled,
      'toggled_at', NOW()
    ),
    updated_at = NOW(),
    created_by = p_admin_user;
  
  -- Return status
  RETURN QUERY
  SELECT 'Promo Codes'::TEXT, p_enabled, CASE WHEN p_enabled THEN 'Enabled' ELSE 'Disabled' END::TEXT
  UNION ALL
  SELECT 'Direct Bonuses'::TEXT, p_enabled, CASE WHEN p_enabled THEN 'Enabled' ELSE 'Disabled' END::TEXT;
END;
$$;

-- ==========================================
-- 5. STATUS AND MONITORING FUNCTIONS
-- ==========================================

-- Function to get current bonus system status
CREATE OR REPLACE FUNCTION get_bonus_system_status()
RETURNS TABLE (
  system_type TEXT,
  system_name TEXT,
  is_enabled BOOLEAN,
  config_summary TEXT,
  last_updated TIMESTAMP WITH TIME ZONE,
  updated_by TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    abc.control_type::TEXT,
    abc.control_name::TEXT,
    abc.is_enabled,
    CASE 
      WHEN abc.control_type = 'promo_codes' AND abc.control_name = 'global_limits' THEN
        'Max: $' || (abc.config_data->>'max_amount_cop') || ' COP, ' || (abc.config_data->>'max_uses_per_user') || ' uses per user'
      WHEN abc.control_type = 'direct_bonuses' AND abc.control_name = 'percentage_setting' THEN
        'Current bonus: ' || (abc.config_data->>'percentage') || '%'
      ELSE abc.description
    END::TEXT,
    abc.updated_at,
    abc.created_by::TEXT
  FROM admin_bonus_controls abc
  ORDER BY abc.control_type, abc.control_name;
END;
$$;

-- Function to get quick stats
CREATE OR REPLACE FUNCTION get_bonus_stats_summary()
RETURNS TABLE (
  metric_name TEXT,
  metric_value TEXT,
  period TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  -- Promo codes stats
  SELECT 
    'Promo Codes Redeemed (Today)'::TEXT,
    COUNT(*)::TEXT,
    'Last 24h'::TEXT
  FROM promo_code_redemptions 
  WHERE redeemed_at >= CURRENT_DATE
  
  UNION ALL
  
  -- Direct bonuses stats
  SELECT 
    'Direct Bonuses Applied (Today)'::TEXT,
    COUNT(*)::TEXT,
    'Last 24h'::TEXT
  FROM user_promo_applications 
  WHERE applied_at >= CURRENT_DATE
  
  UNION ALL
  
  -- Total bonus value given today
  SELECT 
    'Total Bonus Value (Today)'::TEXT,
    '$' || COALESCE(SUM(
      COALESCE(pc.cash_amount, 0) + COALESCE(upa.bonus_amount, 0)
    ), 0)::TEXT || ' COP',
    'Last 24h'::TEXT
  FROM (
    SELECT pc.cash_amount
    FROM promo_code_redemptions pcr
    JOIN promo_codes pc ON pc.id = pcr.code_id
    WHERE pcr.redeemed_at >= CURRENT_DATE
    
    UNION ALL
    
    SELECT upa.bonus_amount
    FROM user_promo_applications upa
    WHERE upa.applied_at >= CURRENT_DATE
  ) AS combined_bonuses(cash_amount);
END;
$$;

-- ==========================================
-- 6. EMERGENCY CONTROLS
-- ==========================================

-- Emergency stop all bonuses
CREATE OR REPLACE FUNCTION emergency_stop_all_bonuses(
  p_reason TEXT DEFAULT 'Emergency stop',
  p_admin_user TEXT DEFAULT 'emergency'
)
RETURNS TEXT
LANGUAGE plpgsql
AS $$
BEGIN
  -- Disable all systems
  PERFORM toggle_all_bonus_systems(false, p_admin_user);
  
  -- Log emergency stop
  INSERT INTO admin_bonus_controls (control_type, control_name, is_enabled, config_data, description, created_by)
  VALUES (
    'emergency',
    'emergency_stop',
    false,
    jsonb_build_object(
      'reason', p_reason,
      'stopped_at', NOW(),
      'systems_affected', ARRAY['promo_codes', 'direct_bonuses']
    ),
    'EMERGENCY STOP: ' || p_reason,
    p_admin_user
  );
  
  RETURN 'EMERGENCY STOP ACTIVATED: All bonus systems disabled. Reason: ' || p_reason;
END;
$$;

-- ==========================================
-- 7. ADMIN DASHBOARD VIEW
-- ==========================================

CREATE OR REPLACE VIEW admin_bonus_dashboard AS
SELECT 
  'System Status' as section,
  system_type || ' - ' || system_name as item,
  CASE WHEN is_enabled THEN '🟢 ENABLED' ELSE '🔴 DISABLED' END as status,
  config_summary as details,
  last_updated as last_change
FROM get_bonus_system_status()

UNION ALL

SELECT 
  'Quick Stats' as section,
  metric_name as item,
  '📊 ' || metric_value as status,
  period as details,
  NOW() as last_change
FROM get_bonus_stats_summary()

ORDER BY section, item;

-- ==========================================
-- 8. PERMISSIONS
-- ==========================================

-- Grant permissions for admin functions
GRANT SELECT ON admin_bonus_controls TO authenticated;
GRANT SELECT ON admin_bonus_dashboard TO authenticated;

-- Admin-only functions (restrict as needed)
GRANT EXECUTE ON FUNCTION toggle_promo_codes_system TO service_role;
GRANT EXECUTE ON FUNCTION toggle_direct_bonuses_system TO service_role;
GRANT EXECUTE ON FUNCTION set_direct_bonus_percentage TO service_role;
GRANT EXECUTE ON FUNCTION toggle_all_bonus_systems TO service_role;
GRANT EXECUTE ON FUNCTION emergency_stop_all_bonuses TO service_role;

-- Status functions for authenticated users
GRANT EXECUTE ON FUNCTION get_bonus_system_status TO authenticated;
GRANT EXECUTE ON FUNCTION get_bonus_stats_summary TO authenticated;

-- ==========================================
-- 9. INITIALIZE DEFAULT SETTINGS
-- ==========================================

-- Enable both systems by default
SELECT toggle_promo_codes_system(true, 'system_init');
SELECT toggle_direct_bonuses_system(true, 'system_init');

-- Set default promo code limits
SELECT set_promo_code_limits(200000, 3, 'system_init'); -- Max 200k COP, 3 uses per user

-- Set default direct bonus to 100%
SELECT set_direct_bonus_percentage(100, 'Bono Directo 100%', 'system_init');

-- ==========================================
-- 10. VERIFICATION
-- ==========================================

-- Show initial status
SELECT * FROM admin_bonus_dashboard;